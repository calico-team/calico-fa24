"""
Translation of explorer_nacho.cpp generated by ChatGPT
"""

import random
from collections import deque

def main():
    rng = random.Random(20241116)  # Initialize the random number generator with the same seed

    tc = int(input())  # Read the number of test cases
    while tc > 0:
        tc -= 1
        g = [set() for _ in range(501)]  # Create a list of sets for the graph
        d = [[-1, -1] for _ in range(501)]  # Distance matrix, initialized to -1
        d[1][0] = 0  # Distance from node 1 in state 0 is 0
        d[500][1] = 0  # Distance from node 500 in state 1 is 0
        q = deque()  # Initialize a deque for BFS
        source = (1, 0)  # Source is node 1 in state 0
        sink = (500, 1)  # Sink is node 500 in state 1
        
        if rng.randint(0, 1) == 1:  # Randomly swap source and sink
            source, sink = sink, source
        
        q.append(source)  # Push the source into the queue
        q.append(sink)    # Push the sink into the queue
        ans = -1
        
        while ans == -1:
            u, s = q.popleft()  # Pop from the front of the deque
            
            while len(g[u]) != 3:  # Ensure the node has exactly 3 neighbors
                print(f"SCAN {u}")
                v = int(input())  # Read the neighbor node v
                g[u].add(v)  # Add v to u's neighbors
                g[v].add(u)  # Add u to v's neighbors
            
            for v in g[u]:  # Explore all neighbors of u
                if d[v][s] != -1:
                    continue
                elif d[v][1-s] != -1:
                    ans = d[u][s] + d[v][1-s] + 1
                    break
                else:
                    d[v][s] = d[u][s] + 1
                    q.append((v, s))
        
        print(f"SUBMIT {ans}")  # Output the final result
        input()  # Read the confirmation response to simulate the interaction

if __name__ == "__main__":
    main()
